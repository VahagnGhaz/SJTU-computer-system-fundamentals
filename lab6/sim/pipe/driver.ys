#######################################################################
# Test for copying block of size K;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $K, %rdx		# src and dst have K elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:

#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# 康艺潇 518431910002
# Describe how and why you modified the baseline code.

# 1. Eight cycle unfolds, reducing the jump and improving the efficiency
# So let's first go to Len -=8 and if Len -= 0 and go to the REMAINDER part.
# If ≥0 is evaluated one by one, judge whether =0 after processing, expand 8 times, if still >, 0 enters the loop again.

# 2. The original code has data hazard

# mrmovq (%rdi), %r10	# read val from src...
# rmmovq %r10, (%rsi)	# ... and store it to dst # data hazard
# So this %r10 here can be inserted in the middle, which is wasteful
# Each expansion uses two registers, %r10 and %r11
# Instead of
# mrmovq (%rdi), %r10	# read val from src...
# mrmovq 8(%rdi),%r11
# rmmovq %r10, (%rsi)	# ... and store it to dst
# The next round assigns %r11 at the time of assignment.

##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0
	iaddq $-8,%rdx		# length -= 8
	jl REMAINDER

Loop:
  mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi),%r11
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1,%rax
Npos:
	rmmovq %r11,8(%rsi)
	andq %r11,%r11
	jle Npos2
	iaddq $1,%rax
Npos2:
	mrmovq 16(%rdi),%r10
	mrmovq 24(%rdi),%r11
	rmmovq %r10, 16(%rsi)
	andq %r10,%r10
	jle Npos3
	iaddq $1,%rax
Npos3:
	rmmovq %r11,24(%rsi)
	andq %r11,%r11
	jle Npos4
	iaddq $1,%rax
Npos4:
	mrmovq 32(%rdi),%r10
	mrmovq 40(%rdi),%r11
	rmmovq %r10, 32(%rsi)
	andq %r10,%r10
	jle Npos5
	iaddq $1,%rax
Npos5:
	rmmovq %r11,40(%rsi)
	andq %r11,%r11
	jle Npos6
	iaddq $1,%rax
Npos6:
	mrmovq 48(%rdi),%r10
	mrmovq 56(%rdi),%r11
	rmmovq %r10, 48(%rsi)
	andq %r10,%r10
	jle Npos7
	iaddq $1,%rax
Npos7:
	rmmovq %r11,56(%rsi)
	andq %r11,%r11
	jle nLoop
	iaddq $1,%rax

nLoop:
	iaddq $64,%rdi
	iaddq $64,%rsi
	iaddq $-8,%rdx
	jge Loop

REMAINDER:
	iaddq $7,%rdx
	jl Done
  mrmovq (%rdi), %r10
	mrmovq 8(%rdi),%r11
	rmmovq %r10, (%rsi) //finish 0
	andq %r10,%r10
	jle REMPOS
	iaddq $1,%rax
REMPOS:
	iaddq $-1,%rdx
	jl Done
  mrmovq 16(%rdi), %r10
	rmmovq %r11,8(%rsi) //finish 1
	andq %r11,%r11
	jle REMPOS1
	iaddq $1,%rax
REMPOS1:
	iaddq $-1,%rdx
	jl Done
  mrmovq 24(%rdi), %r11
	rmmovq %r10, 16(%rsi) //finish 2
	andq %r10,%r10
	jle REMPOS2
	iaddq $1,%rax
REMPOS2:
	iaddq $-1,%rdx
	jl Done
  mrmovq 32(%rdi), %r10
	rmmovq %r11,24(%rsi) //finish 3
	andq %r11,%r11
	jle REMPOS3
	iaddq $1,%rax
REMPOS3:
	iaddq $-1,%rdx
	jl Done
  mrmovq 40(%rdi), %r11
	rmmovq %r10, 32(%rsi)
	andq %r10,%r10      //finish 4
	jle REMPOS4
	iaddq $1,%rax
REMPOS4:
	iaddq $-1,%rdx
	jl Done
  mrmovq 48(%rdi), %r10
	rmmovq %r11,40(%rsi) //finish 5
	andq %r11,%r11
  jle REMPOS5
	iaddq $1,%rax

REMPOS5:
	iaddq $-1,%rdx
	jl Done
  mrmovq 56(%rdi), %r11
	rmmovq %r10, 48(%rsi)
	andq %r10,%r10      //finish 6
	jle REMPOS6
	iaddq $1,%rax

REMPOS6:
	iaddq $-1,%rdx
	jl Done
  mrmovq 64(%rdi), %r10
	rmmovq %r11,56(%rsi) //finish 7
	andq %r11,%r11
  jle REMPOS7
	iaddq $1,%rax

REMPOS7:
	iaddq $-1,%rdx
	jl Done
	rmmovq %r10, 64(%rsi)
	andq %r10,%r10
	jle Done
	iaddq $1,%rax
  
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 0.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $0,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $K,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
